{
	"info": {
		"_postman_id": "c19f39c0-2c11-455d-9de7-b2fef1325304",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37898339"
	},
	"item": [
		{
			"name": "List users page-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseData = pm.response.json();",
							"",
							"pm.test(\"Response contains required numeric fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"per_page\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"total\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"total_pages\").that.is.a(\"number\");",
							"});",
							"",
							"pm.test(\"Response has a valid 'data' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Each object in 'data' has required properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    jsonData.data.forEach(function (item) {",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");",
							"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"first_name\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"last_name\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"avatar\").that.is.a(\"string\").and.not.be.empty;",
							"    });",
							"});",
							"",
							"if (responseData.data && Array.isArray(responseData.data) && responseData.data.length > 1) {",
							"    var userId = responseData.data[1].id;           ",
							"    var userName = responseData.data[1].first_name; ",
							"",
							"    pm.environment.set(\"user_Id\", userId);",
							"    pm.environment.set(\"user_Name\", userName);",
							"",
							"    console.log(\"Saved User ID: \" + userId);",
							"    console.log(\"Saved User Name: \" + userName);",
							"",
							"  pm.test(\"Extract names from Page 1\", function () {",
							"        var userNamesPage1 = responseData.data.sort(function (a, b) {",
							"        return a.first_name.localeCompare(b.first_name); ",
							"    });",
							"        pm.environment.set(\"userNamesPage1\", JSON.stringify(userNamesPage1));",
							"    });",
							"    ",
							"} else {",
							"    console.log(\"Error: Data is not valid or does not contain enough elements.\");",
							"}",
							"",
							"pm.test(\"Extracted and saved as environment variable user ID for reuse in other requests\", function () {",
							"    var userId = pm.environment.get(\"user_Id\");",
							"    pm.expect(userId).to.not.be.undefined; ",
							"    pm.expect(userId).to.be.a(\"number\");  ",
							"});",
							"",
							"pm.test(\"Extracted and saved as environment variable user Name for reuse in other requests\", function () {",
							"    var userName = pm.environment.get(\"user_Name\");",
							"    pm.expect(userName).to.not.be.undefined;",
							"    pm.expect(userName).to.be.a(\"string\");",
							"    pm.expect(userName).to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users?page=1",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Users page-2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains required numeric fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"per_page\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"total\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"total_pages\").that.is.a(\"number\");",
							"});",
							"",
							"pm.test(\"Response has a valid 'data' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Each object in 'data' has required properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    jsonData.data.forEach(function (item) {",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");",
							"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"first_name\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"last_name\").that.is.a(\"string\").and.not.be.empty;",
							"        pm.expect(item).to.have.property(\"avatar\").that.is.a(\"string\").and.not.be.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"Extract names from Page 2\", function () {",
							"    var responseData = pm.response.json();",
							"    if (responseData.data && Array.isArray(responseData.data)) {",
							"        var userNamesPage2 = responseData.data.sort(function (a, b) {",
							"        return a.first_name.localeCompare(b.first_name);",
							"    });",
							"",
							"        pm.environment.set(\"userNamesPage2\", JSON.stringify(userNamesPage2));",
							"    } else {",
							"        console.log(\"Error: Data not valid or empty on Page 2.\");",
							"    }",
							"});",
							"",
							"pm.test(\"Combine names from both pages\", function () {",
							"    var userNamesPage1 = JSON.parse(pm.environment.get(\"userNamesPage1\"));",
							"    var userNamesPage2 = JSON.parse(pm.environment.get(\"userNamesPage2\"));",
							"",
							"    var combinedUserNames = userNamesPage1.concat(userNamesPage2);",
							"",
							"combinedUserNames.sort(function (a, b) {",
							"        return a.first_name.localeCompare(b.first_name);",
							"    });",
							"console.log(\"Sorted and Combined User Data (Detailed):\");",
							"combinedUserNames.forEach(function (user, index) {",
							"    console.log(`${index + 1}: ID: ${user.id}, Name: ${user.first_name} ${user.last_name}, Email: ${user.email}`);",
							"});",
							"    pm.environment.set(\"combinedUserNames\", JSON.stringify(combinedUserNames));",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users?page=2",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user details by ENV ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var responseData = pm.response.json();",
							"",
							"pm.test(\"Response has a valid 'data' field\", function () {",
							"    pm.expect(responseData).to.have.property(\"data\").that.is.an(\"object\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Each object in 'data' has required properties\", function () {",
							"    var item = responseData.data; ",
							"",
							"    pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");",
							"    pm.expect(item).to.have.property(\"email\").that.is.a(\"string\").and.not.be.empty;",
							"    pm.expect(item).to.have.property(\"first_name\").that.is.a(\"string\").and.not.be.empty;",
							"    pm.expect(item).to.have.property(\"last_name\").that.is.a(\"string\").and.not.be.empty;",
							"    pm.expect(item).to.have.property(\"avatar\").that.is.a(\"string\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response has a valid 'support' field\", function () {",
							"    pm.expect(responseData).to.have.property(\"support\").that.is.an(\"object\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Support has required properties\", function () {",
							"    var support = responseData.support;",
							"",
							"    pm.expect(support).to.have.property(\"url\").that.is.a(\"string\").and.not.be.empty;",
							"    pm.expect(support).to.have.property(\"text\").that.is.a(\"string\").and.not.be.empty;",
							"});",
							"",
							"pm.test(\"Email is in correct format\", function () {",
							"    var email = responseData.data.email; ",
							"",
							"    var emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;",
							"",
							"    pm.expect(email).to.match(emailRegex, \"Email is in incorrect format\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"Avatar image is accessible\", function (done) {",
							"    var avatarUrl = responseData.data.avatar;",
							"",
							"    pm.sendRequest({",
							"        url: avatarUrl,",
							"        method: 'GET'",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.log(\"Error while fetching avatar: \", err);",
							"            done(); ",
							"            return;",
							"        }",
							"  pm.test(\"GET Avatar sendRequest - Status code is 200 or OK\", function () {",
							"            pm.expect(res.status).to.be.oneOf([200, 'OK'], \"Image is not accessible or does not exist. Status code: \" + res.status);",
							"        });",
							"",
							"            var contentType = res.headers.get('Content-Type');",
							"        pm.test(\"Avatar is a valid image format\", function () {",
							"            pm.expect(contentType).to.include('image', \"Response is not an image. Content-Type: \" + contentType);",
							"        });",
							"",
							"        done();",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users/{{user_Id}}",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users",
						"{{user_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response does not contain a 'data' field\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.not.have.property(\"data\");",
							"});",
							"",
							"pm.test(\"Response does not contain 'id' property in 'data'\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.undefined;",
							"});",
							"",
							"pm.test(\"Response does not contain 'email' property in 'data'\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.undefined;",
							"});",
							"",
							"pm.test(\"Response does not contain 'first_name' property in 'data'\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.undefined;",
							"});",
							"",
							"pm.test(\"Response does not contain 'last_name' property in 'data'\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.undefined;",
							"});",
							"",
							"pm.test(\"Response does not contain 'avatar' property in 'data'\", function () {",
							"    var responseJson = pm.response.json();",
							"    pm.expect(responseJson.data).to.be.undefined;",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users/{{invalid id}}",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users",
						"{{invalid id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var names = [",
							"    \"Alice\", \"Vanko\", \"Charlie\", \"Diana\", \"Eve\", \"Frank\", \"Grace\", \"Hank\", ",
							"    \"Ivy\", \"Jack\", \"Armine\", \"Leo\", \"Mona\", \"Nate\", \"Olivia\", \"Paul\", ",
							"    \"Quinn\", \"Rachel\", \"Steve\", \"Tina\", \"Uma\", \"Vince\", \"Wendy\", \"Xander\", ",
							"    \"Yara\", \"Zane\", \"Liam\", \"Noah\", \"Emma\", \"Olivia\", \"Ava\", \"Sophia\"",
							"];",
							"",
							"var randomIndex = Math.floor(Math.random() * names.length);",
							"",
							"var first_name = names[randomIndex];",
							"",
							"pm.environment.set(\"first_name\", first_name);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Extract and save ID\", function () {",
							"    var responseJson = pm.response.json(); ",
							"    pm.expect(responseJson).to.have.property(\"id\"); ",
							"    pm.environment.set(\"created_userID\", responseJson.id);",
							"});",
							"",
							"pm.test(\"Verify 'name' matches environment variable\", function () {",
							"    var responseJson = pm.response.json();",
							"    var expectedFirstName = pm.environment.get(\"first_name\");",
							"",
							"    pm.expect(responseJson.name).to.eql(expectedFirstName, `Expected 'name' to be ${expectedFirstName}, but got ${responseJson.name}`);",
							"});",
							"",
							"pm.test(\"Verify 'createdAt' is in ISO 8601 format\", function () {",
							"    var responseJson = pm.response.json();",
							"    var createdAt = responseJson.createdAt;",
							"",
							"    ",
							"    var iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;",
							"",
							"    pm.expect(createdAt).to.match(iso8601Regex, `Expected 'createdAt' to be a valid ISO 8601 date, but got ${createdAt}`);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{first_name}}\",\n    \"job\": \"visitor\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.eql(''); ",
							"});",
							"",
							"pm.test(\"Content-Length is 0\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.eql(\"0\");",
							"});",
							"",
							"pm.test(\"Check headers\", function () {",
							"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).to.eql(\"Express\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.eql(\"*\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Reqres_URI}}/api/users/{{created_userID}}",
					"host": [
						"{{Base_Reqres_URI}}"
					],
					"path": [
						"api",
						"users",
						"{{created_userID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_Id",
			"value": ""
		},
		{
			"key": "user_Name",
			"value": ""
		}
	]
}